// Code generated by go-swagger; DO NOT EDIT.

package hoge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostIDStatusCreatedCode is the HTTP code returned for type PostIDStatusCreated
const PostIDStatusCreatedCode int = 201

/*PostIDStatusCreated 成功

swagger:response postIdStatusCreated
*/
type PostIDStatusCreated struct {

	/*
	  In: Body
	*/
	Payload *PostIDStatusCreatedBody `json:"body,omitempty"`
}

// NewPostIDStatusCreated creates PostIDStatusCreated with default headers values
func NewPostIDStatusCreated() *PostIDStatusCreated {

	return &PostIDStatusCreated{}
}

// WithPayload adds the payload to the post Id status created response
func (o *PostIDStatusCreated) WithPayload(payload *PostIDStatusCreatedBody) *PostIDStatusCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Id status created response
func (o *PostIDStatusCreated) SetPayload(payload *PostIDStatusCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostIDStatusCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostIDStatusBadRequestCode is the HTTP code returned for type PostIDStatusBadRequest
const PostIDStatusBadRequestCode int = 400

/*PostIDStatusBadRequest 失敗

swagger:response postIdStatusBadRequest
*/
type PostIDStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostIDStatusBadRequestBody `json:"body,omitempty"`
}

// NewPostIDStatusBadRequest creates PostIDStatusBadRequest with default headers values
func NewPostIDStatusBadRequest() *PostIDStatusBadRequest {

	return &PostIDStatusBadRequest{}
}

// WithPayload adds the payload to the post Id status bad request response
func (o *PostIDStatusBadRequest) WithPayload(payload *PostIDStatusBadRequestBody) *PostIDStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Id status bad request response
func (o *PostIDStatusBadRequest) SetPayload(payload *PostIDStatusBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostIDStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
